<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Echoleung&#39;s Blog</title>
    <link>https://echoleung.github.io/categories/tech/</link>
    <description>Recent content in tech on Echoleung&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://echoleung.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySql优化——索引下推</title>
      <link>https://echoleung.github.io/posts/mysql%E4%BC%98%E5%8C%96%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/mysql%E4%BC%98%E5%8C%96%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8/</guid>
      <description>基本介绍 索引下推（index condition pushdown ）简称ICP，在Mysql5.6的版本上推出，用于优化查询。
在不使用ICP的情况下，在使用**非主键索引（又叫普通索引或者二级索引）**进行查询时，存储引擎通过索引检索到数据，然后返回给MySQL服务器，服务器然后判断数据是否符合条件 。
在使用ICP的情况下，如果存在某些被索引的列的判断条件时，MySQL服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合MySQL服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给MySQL服务器 。
索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。
案例 在开始之前先先准备一张用户表(user)，其中主要几个字段有：id、name、age、address。建立联合索引（name，age）。
假设有一个需求，要求匹配姓名第一个为陈的所有用户，sql语句如下：SELECT * from user where name like &#39;陈%&#39;
根据 &amp;ldquo;最佳左前缀&amp;rdquo; 的原则，这里使用了联合索引（name，age）进行了查询，性能要比全表扫描肯定要高。
问题来了，如果有其他的条件呢？假设又有一个需求，要求匹配姓名第一个字为陈，年龄为20岁的用户，此时的sql语句如下：SELECT * from user where name like &#39;陈%&#39; and age=20
这条sql语句应该如何执行呢？下面对Mysql5.6之前版本和之后版本进行分析。
Mysql5.6之前的版本 5.6之前的版本是没有索引下推这个优化的，因此执行的过程如下图： 会忽略age这个字段，直接通过name进行查询，在(name,age)这课树上查找到了两个结果，id分别为2,1，然后拿着取到的id值一次次的回表查询，因此这个过程需要回表两次。
Mysql5.6及之后版本 5.6版本添加了索引下推这个优化，执行的过程如下图： InnoDB并没有忽略age这个字段，而是在索引内部就判断了age是否等于20，对于不等于20的记录直接跳过，因此在(name,age)这棵索引树中只匹配到了一个记录，此时拿着这个id去主键索引树中回表查询全部数据，这个过程只需要回表一次。
实践 当然上述的分析只是原理上的，我们可以实战分析一下，因此装了Mysql5.6版本的Mysql，解析了上述的语句，如下图： 根据explain解析结果可以看出Extra的值为Using index condition，表示已经使用了索引下推。
总结 索引下推在非主键索引上的优化，可以有效减少回表的次数，大大提升了查询的效率。
关闭索引下推可以使用如下命令： set optimizer_switch=&#39;index_condition_pushdown=off&#39;;</description>
    </item>
    
    <item>
      <title>MySql学习笔记2——MySql索引</title>
      <link>https://echoleung.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>2.1、数据结构及算法基础 2.1.1、索引的本质 MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构。提取主干即可得到索引的本质：索引是一种数据结构。
数据库查询是数据库的最主要功能之一。我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。例如二分查找（binary search）、二叉树查找（binary tree search）等。但是如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构。
所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。
假设该数据结构就是二叉查找树，左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。想要加快 Col2 的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以通过二叉查找在 O(log_2n) 的复杂度内获取到相应数据，相比于顺序查找 O(n) 速度更快。
虽然这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现。
2.1.2、B-Tree 在 B-Tree 中按 key 检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的 data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到 null 指针，前者查找成功，后者查找失败。B-Tree 上查找算法的伪代码如下：
BTree_Search(node, key) { if(node == null) return null; foreach(node.key) { if(node.key[i] == key) return node.data[i]; if(node.key[i] &amp;gt; key) return BTree_Search(point[i]-&amp;gt;node); } return BTree_Search(point[i+1]-&amp;gt;node); } data = BTree_Search(root, my_key); 2.1.3、B+Tree B-Tree 有许多变种，其中最常见的是 B+Tree，例如 MySQL 就普遍使用 B+Tree 实现其索引结构。
与 B-Tree 相比，B+Tree 有以下不同点：</description>
    </item>
    
    <item>
      <title>Frp内网穿透</title>
      <link>https://echoleung.github.io/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>准备工作  一台具有公网IP的设备，我用的是腾讯云的主机 需要进行穿透的内网的设备，我的iMac 内网穿透工具 frp  开始安装 服务器安装 下载frp可执行包
wget https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz 解压
tar -zxf frp_0.38.0_linux_amd64.tar.gz 进入文件
cd frp_0.38.0_linux_amd64/ 修改配置
vi frps.ini [common] bind_port = 7000 token = 123456 启动
./frps -c frps.ini Mac端安装 下载frp可执行包
https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_darwin_amd64.tar.gz 解压
tar -zxf frp_0.38.0_darwin_amd64.tar.gz 进入文件
cd frp_0.38.0_darwin_amd64/ 修改配置
vim frpc.ini [common] server_addr = x.x.x.x # 公网IP server_port = 7000 token = 123456 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 7022 [vnc] type = tcp local_ip = 127.</description>
    </item>
    
    <item>
      <title>Hugo安装记录</title>
      <link>https://echoleung.github.io/posts/hugo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/hugo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</guid>
      <description>安装Hugo 本机的环境是Mac，并且已经安装了Homebrew，直接使用命令安装：
brew install hugo 在硬盘中选取合适的存储路径，然后命令行中使用如下指令生成网页本地文档：
hugo new site personal-site  Note: 使用 -f 切换到使用yml格式的配置文件，PaperMod主题推荐使用yml
hugo new site &amp;lt;name of site&amp;gt; -f yml  由此可得到如下文件目录：
personal-site ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 常用目录用处如下：
   子目录名称 功能     archetypes 新文章默认模板   config.toml Hugo 配置文档   content 存放所有 Markdown 格式的文章   layouts 存放自定义的 view，可为空   static 存放图像、CNAME、css、js 等资源，发布后该目录下所有资源将处于网页根目录   themes 存放下载的主题    使用下面的命令生成新的文章草稿：</description>
    </item>
    
  </channel>
</rss>
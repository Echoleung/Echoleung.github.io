<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Echoleung&#39;s Blog</title>
    <link>https://echoleung.github.io/</link>
    <description>Recent content on Echoleung&#39;s Blog</description>
    <image>
      <url>https://echoleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://echoleung.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Nov 2021 11:30:03 +0000</lastBuildDate><atom:link href="https://echoleung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySql学习笔记2——MySql索引</title>
      <link>https://echoleung.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Nov 2021 11:30:03 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>2.1、数据结构及算法基础 2.1.1、索引的本质 MySQL 官方对索引的定义为：索引（Index）是帮助 MySQL 高效获取数据的数据结构。提取主干即可得到索引的本质：索引是一种数据结构。
数据库查询是数据库的最主要功能之一。我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。例如二分查找（binary search）、二叉树查找（binary tree search）等。但是如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构。
所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。
假设该数据结构就是二叉查找树，左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。想要加快 Col2 的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以通过二叉查找在 O(log_2n) 的复杂度内获取到相应数据，相比于顺序查找 O(n) 速度更快。
虽然这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现。
2.1.2、B-Tree 在 B-Tree 中按 key 检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的 data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到 null 指针，前者查找成功，后者查找失败。B-Tree 上查找算法的伪代码如下：
BTree_Search(node, key) { if(node == null) return null; foreach(node.key) { if(node.key[i] == key) return node.data[i]; if(node.key[i] &amp;gt; key) return BTree_Search(point[i]-&amp;gt;node); } return BTree_Search(point[i+1]-&amp;gt;node); } data = BTree_Search(root, my_key); 2.1.3、B+Tree B-Tree 有许多变种，其中最常见的是 B+Tree，例如 MySQL 就普遍使用 B+Tree 实现其索引结构。
与 B-Tree 相比，B+Tree 有以下不同点：</description>
    </item>
    
    <item>
      <title>Frp内网穿透</title>
      <link>https://echoleung.github.io/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>基于腾讯云主机实现mac的内网穿透</description>
    </item>
    
    <item>
      <title>Hugo安装记录</title>
      <link>https://echoleung.github.io/posts/hugo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echoleung.github.io/posts/hugo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</guid>
      <description>记录了安装Hugo过程和踩坑</description>
    </item>
    
    
    
  </channel>
</rss>
